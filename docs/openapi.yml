{
  "openapi": "3.0.2",
  "info": {
    "title": "Observer API",
    "description": "Observer API server",
    "version": "0.1.0"
  },
  "paths": {
    "/account/me": {
      "get": {
        "summary": "Get Me",
        "operationId": "get_me_account_me_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/account/confirm/{code}": {
      "get": {
        "summary": "Confirm Account",
        "operationId": "confirm_account_account_confirm__code__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Code",
              "type": "string"
            },
            "name": "code",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/account/confirmation/resend": {
      "post": {
        "summary": "Resend Confirmation",
        "operationId": "resend_confirmation_account_confirmation_resend_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "summary": "Token Login",
        "description": "Login using email and password",
        "operationId": "token_login_auth_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token/refresh": {
      "post": {
        "summary": "Token Refresh",
        "description": "Refresh access token using refresh token",
        "operationId": "token_refresh_auth_token_refresh_post",
        "parameters": [
          {
            "description": "Refresh token cookie",
            "required": false,
            "schema": {
              "title": "Refresh Token",
              "type": "string",
              "description": "Refresh token cookie"
            },
            "name": "refresh_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Token Register",
        "description": "Register using email and password",
        "operationId": "token_register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Change Password",
        "description": "Change password for user",
        "operationId": "change_password_auth_change_password_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset Password Request",
        "description": "Reset password for user using email",
        "operationId": "reset_password_request_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password/{code}": {
      "post": {
        "summary": "Reset Password With Code",
        "description": "Reset password using reset code",
        "operationId": "reset_password_with_code_auth_reset_password__code__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Code",
              "type": "string"
            },
            "name": "code",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "description": "Simple health endpoint",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/mfa/configure": {
      "post": {
        "summary": "Configure Mfa",
        "description": "Setup MFA authentication",
        "operationId": "configure_mfa_mfa_configure_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAActivationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mfa/setup": {
      "post": {
        "summary": "Setup Mfa",
        "description": "Save MFA configuration and create backup codes.\n\nNOTE:\n    Only the latest private key is used to encrypt secret and backup codes.",
        "operationId": "setup_mfa_mfa_setup_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MFAActivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFABackupCodesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mfa/reset": {
      "post": {
        "summary": "Reset Mfa",
        "description": "Reset MFA using one of backup codes\n\nNOTE:\n    HTTP 204 returned anyway to prevent user email brute forcing  because we only\n    want exact matches to check and reset if given backup code is valid.",
        "operationId": "reset_mfa_mfa_reset_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MFAAResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/": {
      "post": {
        "summary": "Create Project",
        "operationId": "create_project_projects__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "summary": "Get Project",
        "operationId": "get_project_projects__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Project",
        "operationId": "update_project_projects__project_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Project",
        "operationId": "delete_project_projects__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/members": {
      "get": {
        "summary": "Get Project Members",
        "operationId": "get_project_members_projects__project_id__members_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "How many items to return?",
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "How many items to return?",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "How many items to skip?",
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "description": "How many items to skip?",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMembersResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Project Member",
        "operationId": "add_project_member_projects__project_id__members_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/members/{user_id}": {
      "put": {
        "summary": "Update Project Members Permissions",
        "operationId": "update_project_members_permissions_projects__project_id__members__user_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMemberResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Project Member",
        "operationId": "delete_project_member_projects__project_id__members__user_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "user_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Access Token",
              "type": "string"
            },
            "name": "access_token",
            "in": "cookie"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "title": "APIError",
        "required": [
          "code",
          "status_code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "data": {
            "title": "Data"
          }
        }
      },
      "ChangePasswordRequest": {
        "title": "ChangePasswordRequest",
        "required": [
          "old_password",
          "new_password"
        ],
        "type": "object",
        "properties": {
          "old_password": {
            "title": "Old Password",
            "type": "string",
            "description": "Old password which user has provided",
            "format": "password",
            "writeOnly": true
          },
          "new_password": {
            "title": "New Password",
            "type": "string",
            "description": "New password which user has provided",
            "format": "password",
            "writeOnly": true
          },
          "totp_code": {
            "title": "Totp Code",
            "type": "string",
            "description": "TOTP code if MFA is active for a given user"
          }
        }
      },
      "ErrorCode": {
        "title": "ErrorCode",
        "enum": [
          "unauthorized",
          "forbidden",
          "not_found",
          "conflict_error",
          "totp_error",
          "totp_invalid_backup_code_error",
          "totp_required_error",
          "totp_exists_error",
          "registration_error",
          "password_reset_code_expired_error",
          "weak_password_error",
          "invalid_password_error",
          "similar_passwords_error",
          "confirmation_code_expired_error",
          "internal_error",
          "bad_request"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HealthResponse": {
        "title": "HealthResponse",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string"
          }
        }
      },
      "LoginPayload": {
        "title": "LoginPayload",
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "description": "E-mail address to login",
            "format": "email"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "description": "Password to login",
            "format": "password",
            "writeOnly": true
          },
          "totp_code": {
            "title": "Totp Code",
            "type": "string",
            "description": "TOTP code if MFA is active for a given user"
          }
        }
      },
      "MFAAResetRequest": {
        "title": "MFAAResetRequest",
        "required": [
          "email",
          "backup_code"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "description": "User email",
            "format": "email"
          },
          "backup_code": {
            "title": "Backup Code",
            "type": "string",
            "description": "MFA backup code"
          }
        }
      },
      "MFAActivationRequest": {
        "title": "MFAActivationRequest",
        "required": [
          "secret",
          "totp_code"
        ],
        "type": "object",
        "properties": {
          "secret": {
            "title": "Secret",
            "type": "string",
            "description": "TOTP secret",
            "format": "password",
            "writeOnly": true
          },
          "totp_code": {
            "title": "Totp Code",
            "type": "string",
            "description": "TOTP code to validate and save for user",
            "format": "password",
            "writeOnly": true
          }
        }
      },
      "MFAActivationResponse": {
        "title": "MFAActivationResponse",
        "required": [
          "secret",
          "qr_image"
        ],
        "type": "object",
        "properties": {
          "secret": {
            "title": "Secret",
            "type": "string",
            "description": "TOTP secret"
          },
          "qr_image": {
            "title": "Qr Image",
            "type": "string",
            "description": "Base64 QR code image"
          }
        }
      },
      "MFABackupCodesResponse": {
        "title": "MFABackupCodesResponse",
        "required": [
          "backup_codes"
        ],
        "type": "object",
        "properties": {
          "backup_codes": {
            "title": "Backup Codes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of backup codes"
          }
        }
      },
      "NewPasswordRequest": {
        "title": "NewPasswordRequest",
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string",
            "description": "Password which user has provided",
            "format": "password",
            "writeOnly": true
          }
        }
      },
      "NewPermissionRequest": {
        "title": "NewPermissionRequest",
        "required": [
          "user_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "can_create": {
            "title": "Can Create",
            "type": "boolean",
            "description": "User can create records",
            "default": false
          },
          "can_read": {
            "title": "Can Read",
            "type": "boolean",
            "description": "User can create records",
            "default": true
          },
          "can_update": {
            "title": "Can Update",
            "type": "boolean",
            "description": "User can update records",
            "default": false
          },
          "can_delete": {
            "title": "Can Delete",
            "type": "boolean",
            "description": "User can delete records",
            "default": false
          },
          "can_create_projects": {
            "title": "Can Create Projects",
            "type": "boolean",
            "description": "User can create projects",
            "default": false
          },
          "can_read_documents": {
            "title": "Can Read Documents",
            "type": "boolean",
            "description": "User can read documents",
            "default": false
          },
          "can_read_personal_info": {
            "title": "Can Read Personal Info",
            "type": "boolean",
            "description": "User can read personal info",
            "default": false
          },
          "can_invite_members": {
            "title": "Can Invite Members",
            "type": "boolean",
            "description": "User can invite new members to projects",
            "default": false
          },
          "user_id": {
            "title": "User Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "User can create records"
          },
          "project_id": {
            "title": "Project Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "User can create records"
          }
        }
      },
      "NewProjectRequest": {
        "title": "NewProjectRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of project"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of project"
          },
          "owner_id": {
            "title": "Owner Id",
            "type": "string",
            "description": "ID of creator it overridden currently active user"
          }
        }
      },
      "PermissionResponse": {
        "title": "PermissionResponse",
        "required": [
          "id",
          "user_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "can_create": {
            "title": "Can Create",
            "type": "boolean",
            "description": "User can create records",
            "default": false
          },
          "can_read": {
            "title": "Can Read",
            "type": "boolean",
            "description": "User can create records",
            "default": true
          },
          "can_update": {
            "title": "Can Update",
            "type": "boolean",
            "description": "User can update records",
            "default": false
          },
          "can_delete": {
            "title": "Can Delete",
            "type": "boolean",
            "description": "User can delete records",
            "default": false
          },
          "can_create_projects": {
            "title": "Can Create Projects",
            "type": "boolean",
            "description": "User can create projects",
            "default": false
          },
          "can_read_documents": {
            "title": "Can Read Documents",
            "type": "boolean",
            "description": "User can read documents",
            "default": false
          },
          "can_read_personal_info": {
            "title": "Can Read Personal Info",
            "type": "boolean",
            "description": "User can read personal info",
            "default": false
          },
          "can_invite_members": {
            "title": "Can Invite Members",
            "type": "boolean",
            "description": "User can invite new members to projects",
            "default": false
          },
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "Permission ID"
          },
          "user_id": {
            "title": "User Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "User can create records"
          },
          "project_id": {
            "title": "Project Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "User can create records"
          }
        }
      },
      "ProjectMemberResponse": {
        "title": "ProjectMemberResponse",
        "required": [
          "ref_id",
          "is_active",
          "role",
          "permissions"
        ],
        "type": "object",
        "properties": {
          "ref_id": {
            "title": "Ref Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ]
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionResponse"
          }
        }
      },
      "ProjectMembersResponse": {
        "title": "ProjectMembersResponse",
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberResponse"
            },
            "description": "List of project member"
          }
        }
      },
      "ProjectResponse": {
        "title": "ProjectResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "ID of project"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of project"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of project"
          },
          "owner_id": {
            "title": "Owner Id",
            "type": "string",
            "description": "ID of creator"
          }
        }
      },
      "RegistrationPayload": {
        "title": "RegistrationPayload",
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "description": "E-mail address of a user",
            "format": "email"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "description": "Password which user has provided",
            "format": "password",
            "writeOnly": true
          }
        }
      },
      "ResetPasswordRequest": {
        "title": "ResetPasswordRequest",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "description": "E-mail address of a user",
            "format": "email"
          }
        }
      },
      "Role": {
        "title": "Role",
        "enum": [
          "admin",
          "staff",
          "consultant",
          "guest"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TokenResponse": {
        "title": "TokenResponse",
        "required": [
          "access_token",
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string",
            "description": "JWT refresh token"
          }
        }
      },
      "UpdatePermissionRequest": {
        "title": "UpdatePermissionRequest",
        "type": "object",
        "properties": {
          "can_create": {
            "title": "Can Create",
            "type": "boolean",
            "description": "User can create records",
            "default": false
          },
          "can_read": {
            "title": "Can Read",
            "type": "boolean",
            "description": "User can create records",
            "default": true
          },
          "can_update": {
            "title": "Can Update",
            "type": "boolean",
            "description": "User can update records",
            "default": false
          },
          "can_delete": {
            "title": "Can Delete",
            "type": "boolean",
            "description": "User can delete records",
            "default": false
          },
          "can_create_projects": {
            "title": "Can Create Projects",
            "type": "boolean",
            "description": "User can create projects",
            "default": false
          },
          "can_read_documents": {
            "title": "Can Read Documents",
            "type": "boolean",
            "description": "User can read documents",
            "default": false
          },
          "can_read_personal_info": {
            "title": "Can Read Personal Info",
            "type": "boolean",
            "description": "User can read personal info",
            "default": false
          },
          "can_invite_members": {
            "title": "Can Invite Members",
            "type": "boolean",
            "description": "User can invite new members to projects",
            "default": false
          }
        }
      },
      "UpdateProjectRequest": {
        "title": "UpdateProjectRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of project"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of project"
          }
        }
      },
      "UserResponse": {
        "title": "UserResponse",
        "required": [
          "email",
          "role",
          "id",
          "ref_id"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "description": "E-mail address of a user",
            "format": "email"
          },
          "full_name": {
            "title": "Full Name",
            "type": "string",
            "description": "Full name of a user"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ],
            "description": "Role of a user"
          },
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "ID of user"
          },
          "ref_id": {
            "title": "Ref Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string"
              }
            ],
            "description": "Reference ID generated using short uuid format"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean",
            "description": "Is user active?",
            "default": true
          },
          "is_confirmed": {
            "title": "Is Confirmed",
            "type": "boolean",
            "description": "Is user confirmed?",
            "default": false
          },
          "mfa_enabled": {
            "title": "Mfa Enabled",
            "type": "boolean",
            "description": "Is MFA enabled for user?",
            "default": false
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    }
  }
}